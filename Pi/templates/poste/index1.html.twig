{% extends 'navBar.html.twig' %}

{% block title %}My Posts{% endblock %}

{% block stylesheets %}
    <link rel="stylesheet" href="{{ asset('css/post.css') }}">
    <style>
        /* Notification styles matching your design */
        #notification-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
        }
        .notification {
            padding: 15px 25px;
            border-radius: 8px;
            color: white;
            font-weight: bold;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            margin-bottom: 10px;
            opacity: 0;
            transition: opacity 0.5s ease;
            animation: fadeIn 0.5s, fadeOut 0.5s 4.5s;
            animation-fill-mode: forwards;
        }
        .notification.success {
            background-color: #28a745;
        }
        .notification.error {
            background-color: #dc3545;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        @keyframes fadeOut {
            from { opacity: 1; transform: translateY(0); }
            to { opacity: 0; transform: translateY(-20px); }
        }

        /* Existing post styles */
        .tour-box {
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            margin-bottom: 20px;
            border-radius: 8px;
            overflow: hidden;
        }
        .tour-box:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
        }
        .tour-box-image img {
            height: 200px;
            object-fit: cover;
            width: 100%;
        }
        .btn-like, .btn-comment, .btn-modifier, .btn-supprimer {
            margin-right: 5px;
        }
        .modal-dialog {
            max-width: 600px;
        }
        /* Style for toxic comments */
        #modal-comments-list li.toxic {
            background-color: #ffcccc;
            border-left: 4px solid #ff0000;
        }
        #modal-comments-list li.toxic .comment-content {
            display: none;
        }
        #modal-comments-list li.toxic::after {
            content: "This comment is hidden due to toxicity.";
            color: #ff0000;
            font-style: italic;
            display: block;
            margin-top: 10px;
        }
        /* Ensure images in comments have a consistent size */
        #modal-comments-list .rounded-circle {
            width: 40px;
            height: 40px;
            object-fit: cover;
        }
    </style>
{% endblock %}

{% block content %}
    <!-- Notification Container -->
    <div id="notification-container">
        {% for type, messages in app.flashes %}
            {% for message in messages %}
                <div class="notification {{ type }}">
                    {{ message }}
                </div>
            {% endfor %}
        {% endfor %}
    </div>

    <section>
        <div class="container">
            <div class="row">
                {% for poste in postes %}
                    <div class="col-lg-6 col-md-6">
                        <article class="tour-box list-style" data-poste-id="{{ poste.id }}" data-contenu-complet="{{ poste.contenu|e('html_attr') }}">
                            <div class="tour-box-image">
                                {% if poste.image %}
                                    <img src="{{ asset('Uploads/uploadposte/' ~ poste.image) }}" alt="{{ poste.title }}" class="img-fluid">
                                {% else %}
                                    <img src="{{ asset('images/default-placeholder.jpg') }}" alt="Default image" class="img-fluid">
                                {% endif %}
                            </div>
                            <div class="inner-box">
                                <h3 class="entry-title">
                                    <a>{{ poste.title }}</a>
                                </h3>
                                <div class="entry-content">
                                    <p>{{ poste.contenu|length > 100 ? poste.contenu|slice(0, 100) ~ '...' : poste.contenu }}</p>
                                </div>
                                <div class="categories">
                                    {% for category in poste.categories %}
                                        <span class="badge bg-primary">{{ category }}</span>
                                    {% endfor %}
                                </div>
                                <div class="d-flex">
                                    {% set isLiked = poste.id in likedPostes %}
                                    <button class="btn btn-like" data-poste-id="{{ poste.id }}">
                                        <i class="{{ isLiked ? 'fa-solid fa-heart' : 'fa-regular fa-heart' }}"
                                           style="color: {{ isLiked ? 'red' : '' }}"></i>
                                        <span class="like-count">{{ poste.getLikeCount() }}</span>
                                    </button>
                                    <button class="btn btn-comment">
                                        <i class="fa-regular fa-comment"></i> Comment
                                    </button>
                                    {% if user and poste.user.id == user.id %}
                                        <a href="{{ path('app_poste_edit', {id: poste.id}) }}" class="btn btn-modifier">Edit</a>
                                        <form class="delete-form" data-id="{{ poste.id }}" method="POST" action="{{ path('app_poste_delete', {id: poste.id}) }}">
                                            <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ poste.id) }}">
                                            <button type="submit" class="btn btn-supprimer">Delete</button>
                                        </form>
                                    {% endif %}
                                </div>
                            </div>
                        </article>
                    </div>
                {% endfor %}
            </div>
        </div>
    </section>

    <!-- Modal -->
    <div class="modal fade" id="commentModal" tabindex="-1" aria-labelledby="commentModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="commentModalLabel">Comments</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-4">
                        <img id="modal-post-image" src="" class="img-fluid rounded" alt="Post Image">
                        <p id="modal-post-content" class="mt-3"></p>
                    </div>
                    <h5>Comments:</h5>
                    <div id="modal-comments-container">
                        <ul id="modal-comments-list" class="list-unstyled"></ul>
                    </div>
                    <form id="comment-form" class="mt-3">
                        <input type="hidden" id="modal-post-id">
                        <div class="mb-3">
                            <textarea id="comment-text" class="form-control" placeholder="Write a comment..." rows="3" required></textarea>
                        </div>
                        <button type="submit" class="btn btn-primary">Publish</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const currentUserId = {{ user ? user.id|json_encode|raw : 'null' }};

            // Function to show notification (identical to your design)
            function showNotification(message, type = 'success') {
                const notification = document.createElement("div");
                notification.className = `notification ${type}`;
                notification.innerHTML = message;
                document.getElementById("notification-container").appendChild(notification);

                // Trigger the animation
                setTimeout(() => {
                    const notifications = document.querySelectorAll('.notification');
                    notifications.forEach(n => {
                        if (n !== notification) {
                            n.style.opacity = '0';
                            setTimeout(() => n.remove(), 500);
                        }
                    });
                }, 100);
            }

            // Show existing flash messages
            {% for type, messages in app.flashes %}
            {% for message in messages %}
            showNotification('{{ message }}', '{{ type }}');
            {% endfor %}
            {% endfor %}

            // Function to check toxicity
            async function checkToxicity(commentText) {
                try {
                    const response = await fetch(`/poste/comment/check-toxicity`, {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ content: commentText }),
                    });
                    const data = await response.json();
                    if (data.error) {
                        console.error("Toxicity check error:", data.error);
                        return false;
                    }
                    return data.isToxic || false;
                } catch (error) {
                    console.error("Error checking toxicity:", error);
                    return false;
                }
            }

            // Load comments with toxicity detection
            async function loadComments(postId) {
                try {
                    const response = await fetch(`/poste/comments/${postId}`);
                    const data = await response.json();
                    const commentsList = document.getElementById("modal-comments-list");
                    commentsList.innerHTML = "";

                    for (const comment of data.comments) {
                        const isToxic = await checkToxicity(comment.content);
                        const li = document.createElement("li");
                        li.classList.add("mb-3", "p-3", "rounded");
                        li.dataset.id = comment.id;

                        if (isToxic) {
                            li.classList.add("toxic");
                        } else {
                            li.classList.add("bg-light");
                        }

                        li.innerHTML = `
                            <div class="d-flex align-items-center mb-2">
                                <div class="flex-shrink-0">
                                    ${comment.user.profilePicture
                            ? `<img src="${comment.user.profilePicture}" alt="${comment.user.firstName}" class="rounded-circle">`
                            : `<div class="rounded-circle bg-secondary"><span class="text-white">No photo</span></div>`
                        }
                                </div>
                                <div class="flex-grow-1 ms-3">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <strong>${comment.user.firstName} ${comment.user.lastName}</strong>
                                        <small class="text-muted">${new Date(comment.createdAt).toLocaleString('en-US', {
                            year: 'numeric', month: 'numeric', day: 'numeric', hour: '2-digit', minute: '2-digit'
                        })}</small>
                                    </div>
                                    <p class="mb-0 comment-content">${comment.content}</p>
                                    <div class="mt-2">
                                        ${comment.user.id === currentUserId && !isToxic
                            ? `<button class="btn btn-edit-comment" data-comment-id="${comment.id}">
                                                <i class="fas fa-edit"></i> Edit
                                            </button>
                                            <button class="btn btn-delete-comment" data-comment-id="${comment.id}">
                                                <i class="fas fa-trash"></i> Delete
                                            </button>`
                            : ''
                        }
                                    </div>
                                </div>
                            </div>
                        `;
                        commentsList.appendChild(li);
                    }
                    attachCommentEventListeners();
                } catch (error) {
                    console.error("Error loading comments:", error);
                }
            }

            // Attach event listeners for comments
            function attachCommentEventListeners() {
                document.querySelectorAll(".btn-delete-comment").forEach(button => {
                    button.addEventListener("click", function () {
                        const commentId = this.dataset.commentId;
                        if (confirm("Are you sure you want to delete this comment?")) {
                            fetch(`/poste/comment/delete/${commentId}`, {
                                method: "POST",
                            })
                                .then(response => response.json())
                                .then(data => {
                                    if (data.success) {
                                        showNotification("Comment deleted successfully!", "success");
                                        loadComments(document.getElementById("modal-post-id").value);
                                    } else {
                                        showNotification("Failed to delete comment!", "error");
                                    }
                                })
                                .catch(error => {
                                    console.error("Error deleting comment:", error);
                                    showNotification("Error deleting comment!", "error");
                                });
                        }
                    });
                });

                document.querySelectorAll(".btn-edit-comment").forEach(button => {
                    button.addEventListener("click", function () {
                        const commentId = this.dataset.commentId;
                        const commentElement = document.querySelector(`li[data-id="${commentId}"]`);
                        const commentContent = commentElement.querySelector(".comment-content");
                        const currentContent = commentContent.textContent;

                        const textarea = document.createElement("textarea");
                        textarea.classList.add("form-control", "mb-2");
                        textarea.value = currentContent;

                        const buttonsDiv = document.createElement("div");
                        buttonsDiv.classList.add("edit-comment-buttons");
                        buttonsDiv.innerHTML = `
                            <button class="save">Save</button>
                            <button class="cancel">Cancel</button>
                        `;

                        commentContent.replaceWith(textarea);
                        commentElement.querySelector("div.mt-2").replaceWith(buttonsDiv);

                        buttonsDiv.querySelector(".cancel").addEventListener("click", function () {
                            textarea.replaceWith(commentContent);
                            const originalButtons = document.createElement("div");
                            originalButtons.classList.add("mt-2");
                            originalButtons.innerHTML = `
                                <button class="btn btn-edit-comment" data-comment-id="${commentId}">
                                    <i class="fas fa-edit"></i> Edit
                                </button>
                                <button class="btn btn-delete-comment" data-comment-id="${commentId}">
                                    <i class="fas fa-trash"></i> Delete
                                </button>
                            `;
                            buttonsDiv.replaceWith(originalButtons);
                            attachCommentEventListeners();
                        });

                        buttonsDiv.querySelector(".save").addEventListener("click", async function () {
                            const newContent = textarea.value.trim();
                            if (newContent) {
                                const isToxic = await checkToxicity(newContent);
                                if (isToxic) {
                                    showNotification("Your comment appears toxic. Please revise it.", "error");
                                    return;
                                }
                                fetch(`/poste/comment/edit/${commentId}`, {
                                    method: "POST",
                                    headers: { "Content-Type": "application/json" },
                                    body: JSON.stringify({ content: newContent }),
                                })
                                    .then(response => response.json())
                                    .then(data => {
                                        if (data.success) {
                                            showNotification("Comment updated successfully!", "success");
                                            loadComments(document.getElementById("modal-post-id").value);
                                        } else {
                                            showNotification("Failed to update comment!", "error");
                                        }
                                    })
                                    .catch(error => {
                                        console.error("Error editing comment:", error);
                                        showNotification("Error updating comment!", "error");
                                    });
                            }
                        });
                    });
                });
            }

            // Open modal when clicking on post
            document.querySelectorAll(".tour-box").forEach(box => {
                box.addEventListener("click", function (e) {
                    if (e.target.closest('.btn-like') || e.target.closest('.btn-modifier') || e.target.closest('.btn-supprimer')) return;
                    const postId = this.getAttribute("data-poste-id");
                    document.getElementById("modal-post-id").value = postId;
                    document.getElementById("modal-post-image").src = this.querySelector("img").src;
                    document.getElementById("modal-post-content").textContent = this.getAttribute("data-contenu-complet");
                    loadComments(postId);
                    const commentModal = new bootstrap.Modal(document.getElementById("commentModal"));
                    commentModal.show();
                });
            });

            // Handle comment submission
            document.getElementById("comment-form").addEventListener("submit", async function (event) {
                event.preventDefault();
                const postId = document.getElementById("modal-post-id").value;
                const commentText = document.getElementById("comment-text").value.trim();

                if (!commentText) return;

                const isToxic = await checkToxicity(commentText);
                if (isToxic) {
                    showNotification("Your comment appears toxic. Please revise it.", "error");
                    return;
                }

                fetch(`/poste/comment/add/${postId}`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ content: commentText }),
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            showNotification("Comment added successfully!", "success");
                            document.getElementById("comment-text").value = "";
                            loadComments(postId);
                        } else {
                            showNotification("Failed to add comment!", "error");
                        }
                    })
                    .catch(error => {
                        console.error("Error adding comment:", error);
                        showNotification("Error adding comment!", "error");
                    });
            });

            // Handle like button
            document.querySelectorAll(".btn-like").forEach(button => {
                button.addEventListener("click", function (event) {
                    event.stopPropagation();
                    const postId = this.getAttribute("data-poste-id");
                    const isLiked = this.querySelector("i").classList.contains("fa-solid");

                    fetch(`/like/toggle/${postId}`, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            "X-Requested-With": "XMLHttpRequest",
                        },
                        body: JSON.stringify({ like: !isLiked }),
                        credentials: 'include',
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                const likeIcon = this.querySelector("i");
                                const likeCount = this.querySelector(".like-count");
                                if (data.liked) {
                                    likeIcon.classList.remove("fa-regular");
                                    likeIcon.classList.add("fa-solid");
                                    likeIcon.style.color = "red";
                                    showNotification("Post liked!", "success");
                                } else {
                                    likeIcon.classList.remove("fa-solid");
                                    likeIcon.classList.add("fa-regular");
                                    likeIcon.style.color = "";
                                    showNotification("Post unliked!", "success");
                                }
                                likeCount.textContent = data.likesCount;
                            } else {
                                showNotification("Failed to toggle like!", "error");
                            }
                        })
                        .catch(error => {
                            console.error("Error handling like:", error);
                            showNotification("Error toggling like!", "error");
                        });
                });
            });

            // Handle delete post
            document.querySelectorAll(".delete-form").forEach(form => {
                form.addEventListener("submit", function (event) {
                    event.preventDefault();
                    if (confirm("Are you sure you want to delete this post?")) {
                        fetch(this.action, {
                            method: "POST",
                            body: new FormData(this),
                        })
                            .then(response => {
                                if (response.ok) {
                                    showNotification("Post deleted successfully!", "success");
                                    window.location.reload();
                                } else {
                                    showNotification("Failed to delete post!", "error");
                                }
                            })
                            .catch(error => {
                                console.error("Error deleting post:", error);
                                showNotification("Error deleting post!", "error");
                            });
                    }
                });
            });
        });
    </script>
{% endblock %}