{% extends 'base.html.twig' %}

{% block title %}Quiz Details{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        :root {
            --primary-color: #4e73df;
            --secondary-color: #858796;
            --success-color: #1cc88a;
            --info-color: #36b9cc;
            --warning-color: #f6c23e;
            --danger-color: #e74a3b;
            --light-color: #f8f9fc;
            --dark-color: #5a5c69;
        }
        
        .gradient-primary {
            background: linear-gradient(135deg, #4e73df 0%, #224abe 100%);
        }
        
        .gradient-success {
            background: linear-gradient(135deg, #1cc88a 0%, #13855c 100%);
        }
        
        .gradient-info {
            background: linear-gradient(135deg, #36b9cc 0%, #258391 100%);
        }
        
        .gradient-warning {
            background: linear-gradient(135deg, #f6c23e 0%, #dda20a 100%);
        }
        
        .gradient-danger {
            background: linear-gradient(135deg, #e74a3b 0%, #be2617 100%);
        }
        
        .card {
            border: none;
            border-radius: 0.5rem;
            box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15);
            transition: transform 0.2s ease-in-out;
        }
        
        .card:hover {
            transform: translateY(-5px);
        }
        
        .card-header {
            background-color: var(--light-color);
            border-bottom: 1px solid #e3e6f0;
            border-top-left-radius: 0.5rem !important;
            border-top-right-radius: 0.5rem !important;
        }
        
        .btn-primary {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
        }
        
        .btn-primary:hover {
            background-color: #2e59d9;
            border-color: #2653d4;
        }
        
        .btn-info {
            background-color: var(--info-color);
            border-color: var(--info-color);
        }
        
        .btn-warning {
            background-color: var(--warning-color);
            border-color: var(--warning-color);
        }
        
        .btn-danger {
            background-color: var(--danger-color);
            border-color: var(--danger-color);
        }
        
        .table-hover tbody tr:hover {
            background-color: rgba(78, 115, 223, 0.05);
        }
        
        .breadcrumb-item.active {
            color: var(--primary-color);
            font-weight: 700;
        }
        
        .pagetitle {
            position: relative;
            padding-bottom: 1rem;
        }
        
        .pagetitle:after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 50%;
            transform: translateX(-50%);
            width: 100px;
            height: 3px;
            background: linear-gradient(90deg, var(--primary-color), var(--info-color));
            border-radius: 3px;
        }
        
        .modal-content {
            border: none;
            border-radius: 0.5rem;
        }
        
        .modal-header {
            background-color: var(--light-color);
            border-bottom: 1px solid #e3e6f0;
        }
        
        .question-card {
            margin-bottom: 1.5rem;
            border-left: 4px solid var(--primary-color);
            transition: all 0.2s ease;
        }
        
        .question-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 0.25rem 1rem rgba(0, 0, 0, 0.15);
        }
        
        .question-card .card-header {
            background-color: rgba(78, 115, 223, 0.05);
        }
        
        .responses-section {
            padding-top: 1rem;
            border-top: 1px solid rgba(0, 0, 0, 0.1);
        }
        
        .response-item {
            padding: 0.75rem 1rem;
            margin-bottom: 0.5rem;
            border-radius: 0.5rem !important;
            transition: all 0.2s ease;
        }
        
        .response-item:hover {
            background-color: rgba(78, 115, 223, 0.05);
        }
        
        .response-item.border-success {
            border-left: 4px solid var(--success-color) !important;
        }
        
        .response-item .badge {
            font-size: 0.75rem;
            padding: 0.4em 0.8em;
        }
        
        .btn-group .btn {
            padding: 0.375rem 0.75rem;
            font-size: 0.875rem;
        }
        
        .btn-group .btn i {
            font-size: 1rem;
        }
        
        .alert {
            border-radius: 0.5rem;
            border: none;
        }
        
        .alert-warning {
            background-color: rgba(246, 194, 62, 0.1);
            color: #dda20a;
        }
        
        .alert-info {
            background-color: rgba(54, 185, 204, 0.1);
            color: #258391;
        }
    </style>
{% endblock %}

{% block body %}
<div class="container-fluid">
    <div class="row justify-content-center">
        <div class="col-12 col-xl-10">
            <div class="pagetitle text-center mb-4">
                <h1 class="display-5 fw-bold text-primary">Quiz Details</h1>
                <nav>
                    <ol class="breadcrumb justify-content-center">
                        <li class="breadcrumb-item"><a href="{{ path('quiz_list') }}" class="text-decoration-none">Home</a></li>
                        <li class="breadcrumb-item"><a href="{{ path('quiz_list') }}" class="text-decoration-none">Quizzes</a></li>
                        <li class="breadcrumb-item active">{{ quiz.getName() }}</li>
                    </ol>
                </nav>
            </div>

            <section class="section">
                <div class="row justify-content-center">
                    <div class="col-12 col-md-10 col-lg-8">
                        <div class="card shadow">
                            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                <h6 class="m-0 font-weight-bold text-primary">Quiz Information</h6>
                                <div class="btn-group" role="group">
                                    <a href="{{ path('quiz_delete', {'id': quiz.id}) }}" class="btn btn-danger" onclick="return confirm('Are you sure you want to delete this quiz?')">
                                        <i class="bi bi-trash me-2"></i>Delete Quiz
                                    </a>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="row mb-4">
                                    <div class="col-12">
                                        <h5 class="text-primary mb-3">Quiz Name</h5>
                                        <p class="lead">{{ quiz.getName() }}</p>
                                    </div>
                                </div>

                                <h5 class="text-primary mb-3">Questions</h5>
                                {% if quiz.questions is empty %}
                                    <div class="alert alert-info">
                                        <i class="bi bi-info-circle me-2"></i>No questions have been added to this quiz yet.
                                    </div>
                                {% else %}
                                    {% for question in quiz.questions %}
                                        <div class="card question-card mb-4">
                                            <div class="card-header py-3 d-flex justify-content-between align-items-center">
                                                <h6 class="mb-0 fw-bold text-primary">
                                                    <i class="bi bi-question-circle me-2"></i>
                                                    Question {{ loop.index }}
                                                </h6>
                                                <div class="btn-group">
                                                    <button type="button" class="btn btn-danger btn-sm" onclick="if(confirm('Are you sure you want to delete this question?')) window.location.href='{{ path('question_delete', {'id': question.id}) }}'">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </div>
                                            </div>
                                            <div class="card-body">
                                                <p class="card-text mb-4">{{ question.text }}</p>
                                                
                                                <div class="responses-section">
                                                    <h6 class="text-primary mb-3">
                                                        <i class="bi bi-check2-circle me-2"></i>Responses
                                                    </h6>
                                                    {% if question.responses is empty %}
                                                        <div class="alert alert-warning">
                                                            <i class="bi bi-exclamation-triangle me-2"></i>No responses available for this question.
                                                        </div>
                                                    {% else %}
                                                        <div class="list-group">
                                                            {% for response in question.responses %}
                                                                <div class="list-group-item response-item {% if response.isCorrect %}border-success bg-light{% endif %}">
                                                                    <div class="d-flex justify-content-between align-items-center">
                                                                        <div class="d-flex align-items-center">
                                                                            {% if response.isCorrect %}
                                                                                <i class="bi bi-check-circle-fill text-success me-2"></i>
                                                                            {% else %}
                                                                                <i class="bi bi-circle text-muted me-2"></i>
                                                                            {% endif %}
                                                                            <span>{{ response.text }}</span>
                                                                        </div>
                                                                        {% if response.isCorrect %}
                                                                            <span class="badge bg-success">Correct Answer</span>
                                                                        {% endif %}
                                                                    </div>
                                                                </div>
                                                            {% endfor %}
                                                        </div>
                                                    {% endif %}
                                                </div>
                                            </div>
                                        </div>
                                    {% endfor %}
                                {% endif %}
                                
                                <div class="mt-4">
                                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addQuestionModal">
                                        <i class="bi bi-plus-circle me-2"></i>Add Question
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
        </div>
    </div>
</div>

<!-- Add Question Modal -->
<div class="modal fade" id="addQuestionModal" tabindex="-1" aria-labelledby="addQuestionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addQuestionModalLabel">Add New Question</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="questionForm">
                    <div class="mb-3">
                        <label for="questionText" class="form-label">Question Text</label>
                        <textarea class="form-control" id="questionText" rows="3" required></textarea>
                    </div>
                    <div class="mb-3">
                        <label class="form-label d-flex justify-content-between align-items-center">
                            <span>Responses</span>
                            <button type="button" class="btn btn-sm btn-outline-primary" id="addResponseBtn">
                                <i class="bi bi-plus-circle me-1"></i>Add Response
                            </button>
                        </label>
                        <div id="responsesList">
                            <!-- Response items will be added here -->
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveQuestionBtn">
                    <i class="bi bi-save me-1"></i>Save Question
                </button>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const addResponseBtn = document.getElementById('addResponseBtn');
        const responsesList = document.getElementById('responsesList');
        const saveQuestionBtn = document.getElementById('saveQuestionBtn');
        const modalInstance = new bootstrap.Modal(document.getElementById('addQuestionModal'));

        // Function to create a response input group
        function createResponseInput() {
            const responseDiv = document.createElement('div');
            responseDiv.className = 'response-item mb-2 p-2 border rounded';
            responseDiv.innerHTML = `
                <div class="d-flex gap-2 align-items-center">
                    <input type="text" class="form-control response-text" placeholder="Enter response">
                    <div class="form-check">
                        <input class="form-check-input response-status" type="checkbox">
                        <label class="form-check-label">Correct</label>
                    </div>
                    <button type="button" class="btn btn-outline-danger btn-sm remove-response">
                        <i class="bi bi-trash"></i>
                    </button>
                </div>
            `;
            return responseDiv;
        }

        // Add initial response input
        responsesList.appendChild(createResponseInput());

        // Add Response button click handler
        addResponseBtn.addEventListener('click', function() {
            responsesList.appendChild(createResponseInput());
        });

        // Remove Response button click handler
        responsesList.addEventListener('click', function(e) {
            if (e.target.closest('.remove-response')) {
                const responseItem = e.target.closest('.response-item');
                if (responsesList.children.length > 1) {
                    responseItem.remove();
                }
            }
        });

        // Function to show error message
        function showError(message) {
            const alertDiv = document.createElement('div');
            alertDiv.className = 'alert alert-danger alert-dismissible fade show';
            alertDiv.innerHTML = `
                <i class="bi bi-exclamation-circle me-2"></i>${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;
            document.querySelector('.modal-body').insertBefore(alertDiv, document.getElementById('questionForm'));
        }

        // Function to show success message
        function showSuccess(message) {
            const alertDiv = document.createElement('div');
            alertDiv.className = 'alert alert-success alert-dismissible fade show';
            alertDiv.innerHTML = `
                <i class="bi bi-check-circle me-2"></i>${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;
            document.querySelector('.modal-body').insertBefore(alertDiv, document.getElementById('questionForm'));
        }

        // Save Question button click handler
        saveQuestionBtn.addEventListener('click', function(e) {
            e.preventDefault();
            
            // Clear previous alerts
            const previousAlerts = document.querySelectorAll('.alert');
            previousAlerts.forEach(alert => alert.remove());

            // Get and validate question text
            const questionText = document.getElementById('questionText').value.trim();
            if (!questionText) {
                showError('Please enter a question text');
                return;
            }

            // Get and validate responses
            const responses = [];
            let hasValidResponse = false;
            document.querySelectorAll('.response-item').forEach(item => {
                const textInput = item.querySelector('.response-text');
                const statusInput = item.querySelector('.response-status');
                const responseText = textInput ? textInput.value.trim() : '';
                if (responseText) {
                    hasValidResponse = true;
                    responses.push({
                        text: responseText,
                        isCorrect: statusInput ? statusInput.checked : false
                    });
                }
            });

            if (!hasValidResponse) {
                showError('Please add at least one response');
                return;
            }

            // Disable the save button and show loading state
            const saveBtn = document.getElementById('saveQuestionBtn');
            saveBtn.disabled = true;
            saveBtn.innerHTML = '<i class="bi bi-hourglass-split"></i> Saving...';

            // Create the request data
            const requestData = {
                text: questionText,
                responses: responses
            };

            // Send the request
            fetch('{{ path('question_create_ajax', {'quizId': quiz.id}) }}', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify(requestData)
            })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => {
                        throw new Error(text);
                    });
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    // Show success message
                    showSuccess(data.message || 'Question created successfully!');
                    
                    // Clear the form
                    document.getElementById('questionText').value = '';
                    document.querySelectorAll('.response-item').forEach(item => {
                        const textInput = item.querySelector('.response-text');
                        if (textInput) {
                            textInput.value = '';
                        }
                        const statusInput = item.querySelector('.response-status');
                        if (statusInput) {
                            statusInput.checked = false;
                        }
                    });
                    
                    // Close modal and reload after a short delay
                    setTimeout(() => {
                        modalInstance.hide();
                        window.location.reload();
                    }, 1000);
                } else {
                    showError(data.error || 'Failed to create question');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showError('An error occurred while saving the question. Please check the console for details.');
            })
            .finally(() => {
                // Re-enable the save button
                saveBtn.disabled = false;
                saveBtn.innerHTML = '<i class="bi bi-save"></i> Save Question';
            });
        });
    });
</script>
{% endblock %} 